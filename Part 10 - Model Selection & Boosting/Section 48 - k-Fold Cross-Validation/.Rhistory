print("Hello World")
cd ..
ls
file:///C:/Users/TekAdvice/Desktop/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/MyPreProcessing/Data.csv
file:///C:/Users/TekAdvice/Desktop/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/MyPreProcessing/data_preprocessing_template.py
file:///C:/Users/TekAdvice/Desktop/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/MyPreProcessing/untitled1.py
system("python \"C:/Users/TekAdvice/Desktop/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/RPreProcessing/data_preprocessing_template.py\"")
dataset = read.csv('Data.csv')
ls
setwd("C:/Users/TekAdvice/Desktop/Desktop/Machine Learning A-Z Template Folder/Part 10 - Model Selection & Boosting/Section 48 - k-Fold Cross-Validation")
install.packages('caret')
# k-Fold Cross Validation
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Kernel SVM to the Training set
library(e1071)
classifier = svm( formula = Purchased ~ .,
data = training_set,
tpye = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Applying k-Fold Cross Validation
# install.packages('caret')
library(caret)
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds , function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm( formula = Purchased ~ .,
data = training_fold,
tpye = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
cv
mean(cv)
cv.mean()
cv.mean
mean(cv)
mean(as.numeric(cv)
)
accuracy = mean(as.numeric(cv))
