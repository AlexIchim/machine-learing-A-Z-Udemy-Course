print("Hello World")
cd ..
ls
file:///C:/Users/TekAdvice/Desktop/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/MyPreProcessing/Data.csv
file:///C:/Users/TekAdvice/Desktop/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/MyPreProcessing/data_preprocessing_template.py
file:///C:/Users/TekAdvice/Desktop/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/MyPreProcessing/untitled1.py
system("python \"C:/Users/TekAdvice/Desktop/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/RPreProcessing/data_preprocessing_template.py\"")
dataset = read.csv('Data.csv')
ls
setwd("C:/Users/TekAdvice/Desktop/Desktop/Machine Learning A-Z Template Folder/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)")
dataset = read.csv('Churn_Modelling.csv')
View(dataset)
View(dataset)
# Artificial Neural Network
# Classification template
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the target feature as factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
View(dataset)
View(dataset)
# Splitting the dataset into the Training set and Test set
# install.package('caTools')
libray(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRation = 0.8)
training_set  = subset(dataset, split == TRUE)
test_set = subset(datset, split == FALSE)
# install.package('caTools')
libray(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRation = 0.8)
training_set  = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# install.package('caTools')
libray(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set  = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# install.package('caTools')
libray(caTools)
set.seed(123)
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set  = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
install.packages('h2o')
library(h2o)
h2o.init(nthreads = 1)
classifier = h2o.deeplearning( y = 'Existed',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
library(h2o)
h2o.init(nthreads = 1)
classifier = h2o.deeplearning( y = 'Existed',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred = h2o.predict(classfier, newdata = as.h2o(test_set[-11]))
classifier = h2o.deeplearning( y = 'Existed',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
h2o.init(nthreads = 1)
classifier = h2o.deeplearning( y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred = as.vector(y_pred)
y_pred
cm = table(testset[, 11], y_pred)
cm = table(test_set[, 11], y_pred)
cm
(1520 + 200) / 2000
h2o.shutdown()
